{"ast":null,"code":"var _jsxFileName = \"/Users/jianpingzuo/Desktop/xifanfs1030/\\u4EE3\\u7801/src/components/ContactAdminEdit/ContactAdminEditForm.js\";\nimport React from 'react';\nimport './Styles.scss';\nimport { Formik, useField, Form } from 'formik';\nimport * as Yup from 'yup';\nimport $ from 'jquery';\n\nconst CustomTextInput = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 15\n    }\n  }, meta.error) : null);\n};\n\nconst CustomCheckbox = ({\n  children,\n  ...props\n}) => {\n  const [field, meta] = useField(props, 'checkbox');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    type: \"checkbox\"\n  }, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })), children), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, meta.error) : null);\n};\n\nconst CustomSelect = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, label), /*#__PURE__*/React.createElement(\"select\", Object.assign({}, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, meta.error) : null);\n};\n\nclass ContactAdminEditForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      classes: {},\n      rows: []\n    };\n  }\n\n  componentDidMount() {\n    this.id = this.getQueryVariable('id');\n  }\n\n  getQueryVariable(variable) {\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n\n    for (var i = 0; i < vars.length; i++) {\n      var pair = vars[i].split(\"=\");\n\n      if (pair[0] == variable) {\n        return pair[1];\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        name: '',\n        email: '',\n        acceptedTerms: false,\n        specialPower: ''\n      },\n      validationSchema: Yup.object({\n        name: Yup.string().min(3, 'At least 3 Char Please').max(15, '15 chart or less Please').required('Required'),\n        email: Yup.string().email('Invalid email').required('Required'),\n        acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms'),\n        special: Yup.string().oneOf(['bear', 'wolf', 'tiger', 'eagle'], 'Invalide Special Power').required('Required')\n      }),\n      onSubmit: (values, {\n        setSubmitting,\n        resetForm\n      }) => {\n        $.ajax({\n          type: \"post\",\n          url: \"http://localhost:3001/contactlog/update\",\n          dataType: \"json\",\n          contentType: \"application/json\",\n          data: JSON.stringify({\n            type: \"update\",\n            id: this.id,\n            \"info\": values\n          }),\n          success: function (res) {\n            if (res.returnCode === 0) {\n              alert('submit success');\n            } else {\n              alert(res.reutrnMsg);\n            }\n\n            resetForm();\n            setSubmitting(false);\n          },\n          error: function (err) {\n            alert(err);\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, props => /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(CustomTextInput, {\n      label: \"Name\",\n      name: \"name\",\n      type: \"text\",\n      placeholder: \"Your Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CustomTextInput, {\n      label: \"Email\",\n      name: \"email\",\n      type: \"email\",\n      placeholder: \"anyone@123.com\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CustomSelect, {\n      label: \"Special Power\",\n      name: \"special\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, \"Select a Special Power\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"bear\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, \"bear\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"wolf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, \"wolf\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"tiger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, \"tiger\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"eagle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, \"eagle\")), /*#__PURE__*/React.createElement(CustomCheckbox, {\n      name: \"acceptedTerms\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, \"I accept the terms\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, props.isSubmitting ? 'Loading' : 'Submit')));\n  }\n\n}\n\nexport default ContactAdminEditForm;","map":{"version":3,"sources":["/Users/jianpingzuo/Desktop/xifanfs1030/代码/src/components/ContactAdminEdit/ContactAdminEditForm.js"],"names":["React","Formik","useField","Form","Yup","$","CustomTextInput","label","props","field","meta","id","name","touched","error","CustomCheckbox","children","CustomSelect","ContactAdminEditForm","Component","constructor","state","classes","rows","componentDidMount","getQueryVariable","variable","query","window","location","search","substring","vars","split","i","length","pair","render","email","acceptedTerms","specialPower","object","string","min","max","required","boolean","oneOf","special","values","setSubmitting","resetForm","ajax","type","url","dataType","contentType","data","JSON","stringify","success","res","returnCode","alert","reutrnMsg","err","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport  './Styles.scss';\nimport { Formik, useField, Form } from 'formik';\nimport * as Yup from 'yup';\nimport $ from 'jquery';\n\nconst CustomTextInput = ({label, ...props}) =>{\n      const [field, meta] = useField(props);\n\n      return (\n        <>\n            <label htmlFor={props.id || props.name}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />\n            {meta.touched && meta.error ? (\n              <div className=\"error\">{meta.error}</div>\n            ) : null}\n\n          </>\n      )\n}\n\n\n\nconst CustomCheckbox = ({children, ...props}) =>{\n  const [field, meta] = useField(props, 'checkbox');\n\n  return (\n    <>\n        <label className=\"checkbox\">\n        <input type=\"checkbox\" {...field} {...props} />\n        {children}\n        </label>\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n\n      </>\n  )\n}\n\n\n\nconst CustomSelect = ({label, ...props}) =>{\n  const [field, meta] = useField(props);\n\n  return (\n    <>\n        <label htmlFor={props.id || props.name}>{label}</label>\n        <select {...field} {...props} />\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n\n      </>\n  )\n}\n\n\nclass ContactAdminEditForm extends React.Component {\n \n constructor(props) {\n      super(props);\n      this.state = {classes: {}, rows: [] };\n       \n  }\n\n  componentDidMount() {\n    \n    this.id = this.getQueryVariable( 'id' )\n\n  }\n\n getQueryVariable(variable) {\n   var query = window.location.search.substring(1);\n   var vars = query.split(\"&\");\n   for (var i=0;i<vars.length;i++) {\n           var pair = vars[i].split(\"=\");\n           if(pair[0] == variable){return pair[1];}\n   }\n   return(false);\n}\n\n  render() {\n    \n  return (\n   \n    <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          acceptedTerms: false,\n          specialPower: '',\n        }}\n\n        validationSchema={Yup.object({\n           name: Yup.string()\n              .min(3, 'At least 3 Char Please')\n              .max(15, '15 chart or less Please')\n              .required('Required'),\n           \n           email: Yup.string()\n               .email('Invalid email')\n               .required('Required'),\n           \n           acceptedTerms: Yup.boolean()\n              .required('Required')\n              .oneOf([true], 'You must accept the terms'),\n\n           \n           special: Yup.string()\n              .oneOf(['bear', 'wolf', 'tiger', 'eagle'], 'Invalide Special Power')\n              .required('Required'),\n\n        })}\n\n        onSubmit={(values, {setSubmitting,resetForm}) => {\n           \n            $.ajax({\n              type: \"post\",\n              url: \"http://localhost:3001/contactlog/update\" ,\n              dataType : \"json\",\n              contentType : \"application/json\", \n              data: JSON.stringify({type:\"update\",id:this.id,\"info\":values}),\n              success: function (res) {\n                if(res.returnCode === 0)\n                {\n                    alert('submit success');\n                }\n                else\n                {\n                    alert(res.reutrnMsg)\n                }\n \n                resetForm();\n                setSubmitting(false);\n\n              },\n              error:function(err)\n              {\n                alert(err);\n              }\n            })\n  \n        }}\n    \n    \n    >\n    \n\n    {props => (\n      <Form>\n        <h1>Edit</h1>\n        <CustomTextInput label=\"Name\" name=\"name\" type=\"text\" placeholder=\"Your Name\" />\n        <CustomTextInput label=\"Email\" name=\"email\" type=\"email\" placeholder=\"anyone@123.com\" />\n        <CustomSelect label=\"Special Power\" name=\"special\">\n          <option value=\"\">Select a Special Power</option>\n          <option value=\"bear\">bear</option>\n          <option value=\"wolf\">wolf</option>\n          <option value=\"tiger\">tiger</option>\n          <option value=\"eagle\">eagle</option>\n        </CustomSelect>\n        <CustomCheckbox name=\"acceptedTerms\">\n           I accept the terms\n        </CustomCheckbox>\n        <button type=\"submit\">{props.isSubmitting ? 'Loading' : 'Submit'}</button>\n      </Form>\n\n    )}\n    </Formik>\n   \n  )\n  }\n\n}\n\n \nexport default ContactAdminEditForm;\n"]},"metadata":{},"sourceType":"module"}