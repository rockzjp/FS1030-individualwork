{"ast":null,"code":"var _jsxFileName = \"/Users/jianpingzuo/Desktop/xifanfs1030/\\u4EE3\\u7801/src/components/Contact/ContactForm.js\";\nimport React from 'react';\nimport './Styles.scss';\nimport { Formik, useField, Form } from 'formik';\nimport * as Yup from 'yup';\nimport $ from 'jquery';\n\nconst CustomTextInput = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 15\n    }\n  }, meta.error) : null);\n};\n\nconst CustomCheckbox = ({\n  children,\n  ...props\n}) => {\n  const [field, meta] = useField(props, 'checkbox');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    type: \"checkbox\"\n  }, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })), children), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, meta.error) : null);\n};\n\nconst CustomSelect = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, label), /*#__PURE__*/React.createElement(\"select\", Object.assign({}, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, meta.error) : null);\n};\n\nfunction ContactForm() {\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      name: '',\n      email: '',\n      acceptedTerms: false,\n      specialPower: ''\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().min(3, 'At least 3 Char Please').max(15, '15 chart or less Please').required('Required'),\n      email: Yup.string().email('Invalid email').required('Required'),\n      acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms'),\n      special: Yup.string().oneOf(['bear', 'wolf', 'tiger', 'eagle'], 'Invalide Special Power').required('Required')\n    }),\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      $.ajax({\n        type: \"post\",\n        url: \"http://localhost:3001/contactlog/insert\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        data: JSON.stringify(values),\n        success: function (res) {\n          if (res.returnCode === 0) {\n            alert('提交成功');\n          } else {\n            alert(res.reutrnMsg);\n          }\n\n          resetForm();\n          setSubmitting(false);\n        },\n        error: function (err) {\n          alert(err);\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, props => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"Contact Me\"), /*#__PURE__*/React.createElement(CustomTextInput, {\n    label: \"Name\",\n    name: \"name\",\n    type: \"text\",\n    placeholder: \"Your Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CustomTextInput, {\n    label: \"Email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"anyone@123.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CustomSelect, {\n    label: \"Special Power\",\n    name: \"special\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, \"Select a Special Power\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"bear\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"bear\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"wolf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"wolf\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"tiger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, \"tiger\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"eagle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"eagle\")), /*#__PURE__*/React.createElement(CustomCheckbox, {\n    name: \"acceptedTerms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"I accept the terms\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, props.isSubmitting ? 'Loading' : 'Submit')));\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/Users/jianpingzuo/Desktop/xifanfs1030/代码/src/components/Contact/ContactForm.js"],"names":["React","Formik","useField","Form","Yup","$","CustomTextInput","label","props","field","meta","id","name","touched","error","CustomCheckbox","children","CustomSelect","ContactForm","email","acceptedTerms","specialPower","object","string","min","max","required","boolean","oneOf","special","values","setSubmitting","resetForm","ajax","type","url","dataType","contentType","data","JSON","stringify","success","res","returnCode","alert","reutrnMsg","err","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport  './Styles.scss';\nimport { Formik, useField, Form } from 'formik';\nimport * as Yup from 'yup';\nimport $ from 'jquery';\n\nconst CustomTextInput = ({label, ...props}) =>{\n      const [field, meta] = useField(props);\n\n      return (\n        <>\n            <label htmlFor={props.id || props.name}>{label}</label>\n            <input className=\"text-input\" {...field} {...props} />\n            {meta.touched && meta.error ? (\n              <div className=\"error\">{meta.error}</div>\n            ) : null}\n\n          </>\n      )\n}\n\n\n\nconst CustomCheckbox = ({children, ...props}) =>{\n  const [field, meta] = useField(props, 'checkbox');\n\n  return (\n    <>\n        <label className=\"checkbox\">\n        <input type=\"checkbox\" {...field} {...props} />\n        {children}\n        </label>\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n\n      </>\n  )\n}\n\n\n\nconst CustomSelect = ({label, ...props}) =>{\n  const [field, meta] = useField(props);\n\n  return (\n    <>\n        <label htmlFor={props.id || props.name}>{label}</label>\n        <select {...field} {...props} />\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n\n      </>\n  )\n}\n\n\nfunction ContactForm() {\n  return (\n   \n    <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          acceptedTerms: false,\n          specialPower: '',\n        }}\n\n        validationSchema={Yup.object({\n           name: Yup.string()\n              .min(3, 'At least 3 Char Please')\n              .max(15, '15 chart or less Please')\n              .required('Required'),\n           \n           email: Yup.string()\n               .email('Invalid email')\n               .required('Required'),\n           \n           acceptedTerms: Yup.boolean()\n              .required('Required')\n              .oneOf([true], 'You must accept the terms'),\n\n           \n           special: Yup.string()\n              .oneOf(['bear', 'wolf', 'tiger', 'eagle'], 'Invalide Special Power')\n              .required('Required'),\n\n        })}\n\n        onSubmit={(values, {setSubmitting,resetForm}) => {\n           \n            $.ajax({\n              type: \"post\",\n              url: \"http://localhost:3001/contactlog/insert\" ,\n              dataType : \"json\",\n              contentType : \"application/json\", \n              data: JSON.stringify(values),\n              success: function (res) {\n                if(res.returnCode === 0)\n                {\n                    alert('提交成功');\n                }\n                else\n                {\n                    alert(res.reutrnMsg)\n                }\n \n                resetForm();\n                setSubmitting(false);\n\n              },\n              error:function(err)\n              {\n                alert(err);\n              }\n            })\n  \n        }}\n    \n    \n    >\n    \n\n    {props => (\n      <Form>\n        <h1>Contact Me</h1>\n        <CustomTextInput label=\"Name\" name=\"name\" type=\"text\" placeholder=\"Your Name\" />\n        <CustomTextInput label=\"Email\" name=\"email\" type=\"email\" placeholder=\"anyone@123.com\" />\n        <CustomSelect label=\"Special Power\" name=\"special\">\n          <option value=\"\">Select a Special Power</option>\n          <option value=\"bear\">bear</option>\n          <option value=\"wolf\">wolf</option>\n          <option value=\"tiger\">tiger</option>\n          <option value=\"eagle\">eagle</option>\n        </CustomSelect>\n        <CustomCheckbox name=\"acceptedTerms\">\n           I accept the terms\n        </CustomCheckbox>\n        <button type=\"submit\">{props.isSubmitting ? 'Loading' : 'Submit'}</button>\n      </Form>\n\n    )}\n    </Formik>\n   \n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}